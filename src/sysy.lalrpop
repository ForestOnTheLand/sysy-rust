use crate::ast::*;

grammar;

match {
    // Skip Whitespace
    r"\s*" => {},
    // Skip Comment - Single-line
    r"//[^\n\r]*[\n\r]*" => {},
    // Skip Comment - Multi-line
    r"/\*([^*]|(\*)*[^*/])*(\*)*\*/" => {},
    // Default
    _
}

Comma<T>: Vec<T> = <mut v: (<T> ",")*> <e: T> => { v.push(e); v };

// CompUnit ::= {GlobalItem}
pub CompUnit: Box<CompUnit> = <items: (<GlobalItem>)*> => Box::new(CompUnit { <> });

// GlobalItem ::= FuncDef | Decl
GlobalItem: Box<GlobalItem> = {
    <FuncDef> => Box::new(GlobalItem::FuncDef( <> )),
    <Decl> => Box::new(GlobalItem::Decl( <> )),
}

// FuncDef ::= BuiltinType IDENT "(" [FuncFParams] ")" Block
FuncDef: Box<FuncDef> = {
    <func_type: BuiltinType> <ident: Ident> "(" <params: FuncFParams> ")" ";"
        => Box::new(FuncDef { <>, block: None }),
    <func_type: BuiltinType> <ident: Ident> "(" <params: FuncFParams> ")" <b: Block>
        => Box::new(FuncDef { func_type, ident, params, block: Some(b) }),
}

// FuncFParams ::= FuncFParam {"," FuncFParam}
FuncFParams: Vec<Box<FuncFParam>> = <params: (<Comma<FuncFParam>>)?> => <>.unwrap_or(Vec::new());

// FuncFParam  ::= BuiltinType IDENT ["[" "]" {"[" Exp "]"}]
FuncFParam: Box<FuncFParam> = {
    <btype: BuiltinType> <ident: Ident> => Box::new(FuncFParam { btype, ident, shape: None }),
    <btype: BuiltinType> <ident: Ident> "[" "]" <shape: ("[" <Exp> "]")*> =>
        Box::new(FuncFParam{ btype, ident, shape: Some(shape) }),
}

// Block ::= "{" {BlockItem} "}"
Block: Block = "{" <items: BlockItem*> "}" => Block { <> };

// BlockItem ::= Decl | Stmt
BlockItem: Box<BlockItem> = {
    Decl => Box::new(BlockItem::Decl( <> )),
    Stmt => Box::new(BlockItem::Stmt( <> )),
}

// Stmt ::= LVal "=" Exp ";"
//        | [Exp] ";"
//        | Block
//        | "if" "(" Exp ")" Stmt ["else" Stmt]
//        | "while" "(" Exp ")" Stmt
//        | "return" [Exp] ";"
Stmt: Box<Stmt> = {
    MatchedStmt => <>,
    OpenStmt => <>,
}

// Something that would never match with other following "else"
MatchedStmt: Box<Stmt> = {
    <LVal> "=" <Exp> ";" => Box::new(Stmt::Assign( <> )),
    <Exp?> ";" => Box::new(Stmt::Exp( <> )),
    "if" "(" <exp: Exp> ")" <s1: MatchedStmt> "else" <s2: MatchedStmt> => Box::new(Stmt::Condition(exp, s1, Some(s2))),
    <Block> => Box::new(Stmt::Block(Box::new( <> ))),
    "while" "(" <Exp> ")" <MatchedStmt> => Box::new(Stmt::While( <> )),
    "break" ";" => Box::new(Stmt::Break),
    "continue" ";" => Box::new(Stmt::Continue),
    "return" <exp: Exp?> ";" => Box::new(Stmt::Return( <> )), 
}

// Something that could probably match with other trailing "else"
OpenStmt: Box<Stmt> = {
    "if" "(" <exp: Exp> ")" <s1: MatchedStmt> "else" <s2: OpenStmt> => Box::new(Stmt::Condition(exp, s1, Some(s2))),
    "if" "(" <exp: Exp> ")" <s1: Stmt> => Box::new(Stmt::Condition(exp, s1, None)),
    "while" "(" <Exp> ")" <OpenStmt> => Box::new(Stmt::While( <> )),
}

// Decl ::= ConstDecl | VarDecl
Decl: Box<Decl> = {
    "const" <btype: BuiltinType> <defs: Comma<Def>> ";" => Box::new(Decl { <>, mutable: false }),
    <btype: BuiltinType> <defs: Comma<Def>> ";" => Box::new(Decl { <>, mutable: true }),
}

// Def ::= IDENT ["[" Exp "]"] | IDENT ["[" Exp "]"] "=" InitVal
Def: Box<Def> = <ident: Ident> <shape: ("[" <Exp> "]")*> <init: ("=" <InitVal>)?> => Box::new(Def { <> });

// InitVal ::= Exp | "{" [Exp {"," Exp}] "}"
InitVal: Box<InitVal> = {
    <Exp> => Box::new(InitVal::Single( <> )),
    "{" <exp: (<Comma<InitVal>>)?> "}" => Box::new(InitVal::Array( exp.unwrap_or(Vec::new()) )),
}

// LVal ::= IDENT ["[" Exp "]"]
LVal: LVal = <ident: Ident> <index: ("[" <Exp> "]")*> => LVal{ <> };
// Exp ::= LOrExp
Exp: Box<Exp> = <lor_exp: LOrExp> => <>;
// PrimaryExp ::= "(" Exp ")" | LVal | Number
PrimaryExp: Box<Exp> = {
    "(" <Exp> ")" => <>,
    <LVal> => Box::new(Exp::LVal( <> )),
    <Number> => Box::new(Exp::Number( <> )),
}
// UnaryExp ::= PrimaryExp | UnaryOp UnaryExp | IDENT "(" [FuncRParams] ")"
UnaryExp: Box<Exp> = {
    <PrimaryExp> => <>,
    <UnaryOperator> <UnaryExp> => Box::new(Exp::Unary( <> )),
    <Ident> "(" <FuncRParams> ")" => Box::new(Exp::Call( <> )),
}
// FuncRParams ::= Exp {"," Exp}
FuncRParams: Vec<Box<Exp>> = (<Comma<Exp>>)? => <>.unwrap_or(Vec::new());
// UnaryOp ::= "+" | "-" | "!"
UnaryOperator: UnaryOperator = {
    "+" => UnaryOperator::Pos,
    "-" => UnaryOperator::Neg,
    "!" => UnaryOperator::Not,
}
// MulExp ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp
MulExp: Box<Exp> = {
    <UnaryExp> => <>,
    <left: MulExp> "*" <right: UnaryExp> => Box::new(Exp::Binary(left, BinaryOperator::Mul, right)),
    <left: MulExp> "/" <right: UnaryExp> => Box::new(Exp::Binary(left, BinaryOperator::Div, right)),
    <left: MulExp> "%" <right: UnaryExp> => Box::new(Exp::Binary(left, BinaryOperator::Mod, right)),
}
// AddExp ::= MulExp | AddExp ("+" | "-") MulExp
AddExp: Box<Exp> = {
    <MulExp> => <>,
    <left: AddExp> "+" <right: MulExp> => Box::new(Exp::Binary(left, BinaryOperator::Add, right)),
    <left: AddExp> "-" <right: MulExp> => Box::new(Exp::Binary(left, BinaryOperator::Sub, right)),
}
// RelExp ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp
RelExp: Box<Exp> = {
    <AddExp> => <>,
    <left: RelExp> "<" <right: AddExp> => Box::new(Exp::Binary(left, BinaryOperator::Lt, right)),
    <left: RelExp> ">" <right: AddExp> => Box::new(Exp::Binary(left, BinaryOperator::Gt, right)),
    <left: RelExp> "<=" <right: AddExp> => Box::new(Exp::Binary(left, BinaryOperator::Le, right)),
    <left: RelExp> ">=" <right: AddExp> => Box::new(Exp::Binary(left, BinaryOperator::Ge, right)),
}
// EqExp ::= RelExp | EqExp ("==" | "!=") RelExp
EqExp: Box<Exp> = {
    <RelExp> => <>,
    <left: EqExp> "==" <right: RelExp> => Box::new(Exp::Binary(left, BinaryOperator::Eq, right)),
    <left: EqExp> "!=" <right: RelExp> => Box::new(Exp::Binary(left, BinaryOperator::NotEq, right)),
}
// LAndExp ::= EqExp | LAndExp "&&" EqExp
LAndExp: Box<Exp> = {
    <EqExp> => <>,
    <left: LAndExp> "&&" <right: EqExp> => Box::new(Exp::Binary(left, BinaryOperator::And, right)),
}
// LOrExp ::= LAndExp | LOrExp "||" LAndExp
LOrExp: Box<Exp> = {
    <LAndExp> => <>,
    <left: LOrExp> "||" <right: LAndExp> => Box::new(Exp::Binary(left, BinaryOperator::Or, right)),
}

// BuiltinType ::= "void" | "int"
BuiltinType: BuiltinType = {
    "void" => BuiltinType::Void,
    "int" => BuiltinType::Int,
}

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
