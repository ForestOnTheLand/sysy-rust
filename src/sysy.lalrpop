use crate::ast::*;

grammar;

match {
    // Skip Whitespace
    r"\s*" => {},
    // Skip Comment - Single-line
    r"//[^\n\r]*[\n\r]*" => {},
    // Skip Comment - Multi-line
    r"/\*([^*]|\*[^/]+/)*\*/" => {},
    // Default
    _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef { <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

// Stmt        ::= "return" Exp ";";
Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };
// Exp         ::= UnaryExp;
Exp: Box<Exp> = <add_exp: AddExp> => Box::new(Exp { <> });
// PrimaryExp  ::= "(" Exp ")" | Number;
PrimaryExp: Box<PrimaryExp> = {
    "(" <Exp> ")" => Box::new(PrimaryExp::Expression( <> )),
    Number => Box::new(PrimaryExp::Number( <> )),
}
// UnaryExp    ::= PrimaryExp | UnaryOp UnaryExp;
UnaryExp: Box<UnaryExp> = {
    PrimaryExp => Box::new(UnaryExp::Single( <> )),
    UnaryOp UnaryExp => Box::new(UnaryExp::Unary( <> )),
}
// UnaryOp ::= "+" | "-" | "!";
UnaryOp: UnaryOp = {
    "+" => UnaryOp::Pos,
    "-" => UnaryOp::Neg,
    "!" => UnaryOp::Not,
}
// MulExp ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
MulExp: Box<MulExp> = {
    UnaryExp => Box::new(MulExp::Single( <> )),
    MulExp MulOp UnaryExp => Box::new(MulExp::Binary( <> )),
}
MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod,
}
// AddExp ::= MulExp | AddExp ("+" | "-") MulExp;
AddExp: Box<AddExp> = {
    MulExp => Box::new(AddExp::Single( <> )),
    AddExp AddOp MulExp => Box::new(AddExp::Binary( <> )),
}
AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
}

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
